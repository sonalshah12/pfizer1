<?php

define('INSTANT_WIN_STATUS_NOT_PROCESSED', 0);
define('INSTANT_WIN_STATUS_WINNER', 1);
define('INSTANT_WIN_STATUS_LOSER_NOT_AVAILABLE_PRIZE', 2);
define('INSTANT_WIN_STATUS_LOSER_SAME_HOUSEHOLD', 3);

define('INSTANT_WIN_INVALID_CODE', 0);
define('INSTANT_WIN_VALID_CODE', 1);
define('INSTANT_WIN_USED_ON_SAME_DAY', 2);

define('INSTANT_WIN_NODE_TYPE_NAME', 'prize');

define('INSTANT_WIN_COUNT_AVAILABLE_CODES_OK', 'OK');
define('INSTANT_WIN_COUNT_AVAILABLE_CODES_NOK', 'NOK');

/**
 * @file
 * This module implements the Instant Wins admin tasks
 */

/**
 * Implements hook_help().
 */
function instant_win_help($path, $arg) {
  switch ($path) {
    case 'admin/help#instant_win':
      return t('Settings for Instant Win module');
  }
}

/**
 * Implements hook_init().
 */
function instant_win_init() {
  // use overriden mail system
  module_load_include('inc', 'instant_win', 'inc/instant_win.mail_system');

  module_load_include('inc', 'instant_win', 'inc/instant_win.forms');
}

/**
 * Implements hook_permission().
 */
function instant_win_permission() {
  return array(
    'administer instant_win configuration' => array(
      'title' => t('Instant Win configuration'),
    ),
    'administer instant_win content' => array(
      'title' => t('Instant Win content management'),
    ),
    'submit get a code form' => array(
      'title' => t('Submit instant win get a code form'),
    ),
    'submit already registered form' => array(
      'title' => t('Submit instant win already registered form'),
    ),
  );
}

/**
 * Implements of hook_menu().
 */
function instant_win_menu() {
  $items = array();

  $weight = 0;

  $items['admin/config/instant-win'] = array(
    'title' => 'Instant Win',
    'description' => 'Instant Win general settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('instant_win_admin_general_settings_form'),
    'access arguments' => array('administer instant_win configuration'),
    'file' => 'inc/instant_win.admin.inc',
  );

  $items['admin/config/instant-win/general'] = array(
    'title' => 'General',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => $weight++,
  );

  $items['admin/config/instant-win/validation'] = array(
    'title' => 'Validation',
    'description' => 'Instant Win validation settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('instant_win_admin_validation_settings_form'),
    'access arguments' => array('administer instant_win configuration'),
    'file' => 'inc/instant_win.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => $weight++,
  );

  $items['admin/config/instant-win/contents'] = array(
    'title' => 'Content',
    'description' => 'Instant Win contents settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('instant_win_admin_contents_settings_form'),
    'access arguments' => array('administer instant_win configuration'),
    'file' => 'inc/instant_win.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => $weight++,
  );

  $items['admin/config/instant-win/notification'] = array(
    'title' => 'Notification',
    'description' => 'Instant Win notification settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('instant_win_admin_notification_settings_form'),
    'access arguments' => array('administer instant_win configuration'),
    'file' => 'inc/instant_win.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => $weight++,
  );

  $items['admin/config/instant-win/timestamps'] = array(
    'title' => 'Prize timestamps',
    'description' => 'Instant Win timestamp settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('instant_win_prize_timestamp_form'),
    'access arguments' => array('administer instant_win configuration'),
    'file' => 'inc/instant_win.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => $weight++,
  );

  $items['admin/reports/instant-win'] = array(
    'title' => 'Instant Win',
    'description' => 'Instant Win administration reports',
    'page callback' => 'instant_win_total_registered_users_report_form',
    'access arguments' => array('administer instant_win configuration'),
    'file' => 'inc/instant_win.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => $weight++,
  );

  $items['admin/reports/instant-win/total-registered-users'] = array(
    'title' => 'Total registered users',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => $weight++,
  );

  $items['admin/reports/instant-win/total-winners-by-day'] = array(
    'title' => 'Total Winners',
    'description' => 'Total winners per day report',
    'page callback' => 'instant_win_total_winners_report_form',
    'access arguments' => array('administer instant_win configuration'),
    'file' => 'inc/instant_win.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => $weight++,
  );

  $items['instant-win/reports/available-codes'] = array(
    'description' => 'Instant Win number of available codes WS',
    'page callback' => 'instant_win_available_codes_status_ws',
    'access arguments'  => array('access content'),
    'file' => 'inc/instant_win.admin.inc',
    'type' => MENU_CALLBACK,
    'weight' => $weight++,
  );

  $items['already-registered'] = array(
    'title' => 'Already Registered',
    'description' => 'Already Registered form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('instant_win_already_registered_form'),
    'access arguments' => array('submit already registered form'),
    'type'              => MENU_CALLBACK,
    'delivery callback' => 'instant_win_delivery_raw_page',
  );

  $items['get-a-code'] = array(
    'title' => 'Get a Code',
    'description' => 'Get a Code form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('instant_win_get_code_form'),
    'access arguments' => array('submit get a code form'),
    'type'              => MENU_CALLBACK,
    'delivery callback' => 'instant_win_delivery_raw_page',
  );

  $items['register-form-success'] = array(
    'title' => 'Success',
    'description'       => 'Main registration form success page',
    'page callback'     => 'instant_win_register_form_success_page',
    'access arguments'  => array('access content'),
    'type'              => MENU_CALLBACK,
    'file' => 'inc/instant_win.common.inc',
  );

  return $items;
}

/**
 * Implements hook_node_info()
 */
function instant_win_node_info() {
  return array(
    'prize' => array(
      'name' => t('Prize'),
      'base' => 'node_content',
      'has_title' => TRUE,
      'title_label' => t('Title'),
      'description' => t('Prize information.'),
    )
  );
}

/**
 *
 * Implements hook_block_info().
 *
 * @return type
 */
function instant_win_block_info() {
  return array(
    'already_registered' => array(
      'info' => t('Already registered form block'),
    ),
    'get_a_code' => array(
      'info' => t('Get a Code form block'),
    ),
  );
}

/**
 *
 * Implements hook_block_view().
 *
 * @param type $delta
 * @return type
 */
function instant_win_block_view($delta = '') {
  $result = NULL;

  $function_name = __FUNCTION__ . '_' . $delta;

  module_load_include('inc', 'instant_win', 'inc/instant_win.blocks');

  if (function_exists($function_name)) {
    $result = $function_name();
  }

  return $result;
}

/**
 * Implements hook_mail().
 */
function instant_win_mail($key, &$message, $params) {
  module_load_include('inc', 'instant_win', 'inc/instant_win.mail');
  $email_definition = _instant_win_get_mail_definition($key, $params);

  $message['subject'] = $email_definition['subject'];
  $message['body'][] = $email_definition['body'];
}

/**
 * Implements hook_mail_alter().
 */
function instant_win_mail_alter(&$message) {
  $is_instant_win_email = (strpos($message['id'], 'instant_win_') === 0);

  if ($is_instant_win_email) {
    $message['headers']['MIME-Version'] = '1.0';
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
    $message['headers']['Content-Transfer-Encoding'] = '8Bit';
    $message['headers']['X-Mailer'] = 'Drupal';
    $message['headers']['Return-Path'] = variable_get('site_mail', '');
  }
}

/**
 * Implements hook_cron().
 */
function instant_win_cron() {
  module_load_include('inc', 'instant_win', 'inc/instant_win.common');

  $max_entries_to_process = variable_get('instant_win_number_of_users_per_process', '1');
  $remainder_entries = instant_win_process_contest_results($max_entries_to_process);
  instant_win_send_alternate_codes($remainder_entries);
}

/**
 *
 * Implements hook_form_alter().
 *
 * @param type $form
 * @param type $form_state
 * @param type $form_id
 */
function instant_win_form_alter(&$form, &$form_state, $form_id) {
  $webform_id = 'webform_client_form_'. variable_get('instant_win_webform_nid', 0);
  if ($webform_id == $form_id) {
    _instant_win_remove_default_field_dob_validation($form);
    _instant_win_add_submit_button_attributes($form);
    _instant_win_append_validation_functions_to_form($form);
    _instant_win_display_success_overlay_message($form);
    _instant_win_fix_default_user_dob($form);


    $form['#submit'] = array_diff($form['#submit'], array('webform_client_form_submit'));
    $form['#submit'][] = '_instant_win_submit_handler';
  }
}

function _instant_win_fix_default_user_dob(&$form) {
  $form['submitted']['field_dob']['#default_value'] = array(
    'year' => NULL,
    'month' => NULL,
    'day' => 1,
  );
}

/**
 * Add javascript files to display a dialog modal with the content configured for the success page.
 */
function _instant_win_display_success_overlay_message(&$form) {
  $display_as_overlay_config = variable_get('instant_win_new_registration_form_display_success_as_overlay', FALSE);

  if ($display_as_overlay_config && isset($_GET['success']) && $_GET['success'] == 1) {
    module_load_include('inc', 'instant_win', 'inc/instant_win.common');
    $registration_success_message = instant_win_register_form_success_page();

    drupal_add_library('system', 'ui.dialog');
    drupal_add_js(array('instant_win' => array('successMessage' => $registration_success_message)), 'setting');
    drupal_add_js(drupal_get_path('module', 'instant_win') . '/scripts/success_modal.js');

    if (isset($_GET['success'])) {
      $form['#action'] = preg_replace('/success=[^&]*&?/', '', $form['#action']);
      $form['#action'] = preg_replace('/\?$/', '', $form['#action']);
    }
  }
}


/**
 *
 * Implements hook_node_presave().
 *
 * @param type $node
 */
function instant_win_node_presave($node) {
  if ($node->type != INSTANT_WIN_NODE_TYPE_NAME) {
    return;
  }

  $timestamps = $node->field_prize_times;
  $node->timestamps = array();
  foreach ($timestamps[$node->language] as $timestamp) {
    $node->timestamps[] = $timestamp['value'];
  }

  unset($node->field_prize_times);
}

/**
 *
 * Implements hook_node_insert().
 *
 * @param type $node
 */
function instant_win_node_insert($node) {
  if ($node->type != INSTANT_WIN_NODE_TYPE_NAME) {
    return;
  }
  module_load_include('inc', 'instant_win', 'inc/instant_win.common');
  instant_win_insert_prize_timestamp($node);
}

/**
 *
 * Implements hook_node_update().
 *
 * @param type $node
 */
function instant_win_node_update($node) {
  if($node->type != INSTANT_WIN_NODE_TYPE_NAME) {
    return;
  }
  module_load_include('inc', 'instant_win', 'inc/instant_win.common');

  instant_win_insert_prize_timestamp($node);
}

/**
 *
 * Implements hook_node_delete().
 *
 * @param type $node
 */
function instant_win_node_delete($node) {
  if($node->type != INSTANT_WIN_NODE_TYPE_NAME) {
    return;
  }
  module_load_include('inc', 'instant_win', 'inc/instant_win.common');

  if (isset($node->nid)) {
    instant_win_delete_all_prize_timestamp($node->nid);
  }
}

function _instant_win_remove_default_field_dob_validation(&$form) {
  if (isset($form['submitted']['field_dob']['#element_validate'])) {
    $defaul_validation_index = array_search('webform_validate_date', $form['submitted']['field_dob']['#element_validate']);
    if ($defaul_validation_index !== FALSE) {
      unset($form['submitted']['field_dob']['#element_validate'][$defaul_validation_index]);
    }
  }
}

function _instant_win_add_submit_button_attributes(&$form) {
  $form['actions']['submit']['#attributes']['title'] = $form['actions']['submit']['#value'];
  $form['actions']['submit']['#attributes']['class'] = array('instant-win-main-registration-submit');
}

function _instant_win_append_validation_functions_to_form(&$form) {
  $fields = array_keys($form['submitted']);
  foreach ($fields as $field) {
    $validation_function = '_instant_win_' . $field . '_validation';

    if (isset($form['submitted'][$field]) && function_exists($validation_function)) {
      $form['submitted'][$field]['#element_validate'][] = $validation_function;
    }
  }
}

function _instant_win_field_first_name_validation($element, &$form_state, $form) {
  module_load_include('inc', 'instant_win', 'inc/instant_win.validators');

  if (!empty($element['#value']) && !instant_win_validate_first_name($element['#value'])) {
    form_error($element, variable_get('instant_win_register_form_first_name_format_error_message', ''));
  }
}

function _instant_win_field_last_name_validation($element, &$form_state, $form) {
  module_load_include('inc', 'instant_win', 'inc/instant_win.validators');

  if (!empty($element['#value']) && !instant_win_validate_last_name($element['#value'])) {
    form_error($element, variable_get('instant_win_register_form_last_name_format_error_message', ''));
  }
}

function _instant_win_field_zip_validation($element, &$form_state, $form) {
  module_load_include('inc', 'instant_win', 'inc/instant_win.validators');

  if (!empty($element['#value']) && !instant_win_validate_zip_code($element['#value'])) {
    form_error($element, variable_get('instant_win_register_form_zipcode_format_error_message', ''));
  }
}

function _instant_win_field_telephone_validation($element, &$form_state, $form) {
  module_load_include('inc', 'instant_win', 'inc/instant_win.validators');

  if (!empty($element['#value']) && !instant_win_validate_phone_number($element['#value'])) {
    form_error($element, variable_get('instant_win_register_form_phone_format_error_message', ''));
  }
}

/**
 * Overrides part of webform_validate_date() (@see webform\components\date.inc - line 273)
 */
function _instant_win_field_dob_validation($element, &$form_state, $form) {
  // Check if the user filled the required fields.
  foreach (array('day', 'month', 'year') as $field_type) {
    if (!is_numeric($element[$field_type]['#value']) && $element['#required']) {
      form_error($element, t('!name field is required.', array('!name' => $element['#title'])));
      return;
    }
  }

  if ($element['month']['#value'] !== '' || $element['day']['#value'] !== '' || $element['year']['#value'] !== '') {
    // Check for a valid date.
    if (!checkdate((int) $element['month']['#value'], (int) $element['day']['#value'], (int) $element['year']['#value'])) {
      form_error($element, t('Entered !name is not a valid date.', array('!name' => $element['#title'])));
      return;
    }

    module_load_include('inc', 'instant_win', 'inc/instant_win.validators');
    if (!instant_win_validate_dob($element['#value'])) {
      form_error($element, variable_get('instant_win_register_form_dob_min_age_error_message', ''));
    }
  }
}

function _instant_win_field_email_validation($element, &$form_state, $form) {
  $is_registered = _instant_win_is_user_registered_with_transaction_scope($element, $form_state);

  if ($is_registered) {
    form_error($element, variable_get('instant_win_register_form_already_registered_message', ''));
  }
}

function _instant_win_field_email_already_registered_validation($element, &$form_state, $form) {
  $is_registered = _instant_win_is_user_registered_with_transaction_scope($element, $form_state);

  if (!$is_registered) {
    form_error($element, variable_get('instant_win_register_form_not_already_registered_message', ''));
  }
}

function _instant_win_is_user_registered_with_transaction_scope($element, &$form_state) {
  module_load_include('inc', 'instant_win', 'inc/instant_win.common');

  instant_win_create_transaction_on_form_state($form_state);

  $is_registered = instant_win_is_user_registered($element['#value']);

  return $is_registered;
}
/**
 *
 * Element validate for registration code.
 *
 * @param type $element
 * @param array $form_state
 * @param type $form
 */
function _instant_win_field_registration_code_validation($element, &$form_state, $form) {
  _instant_win_get_code_validation_with_transaction_scope($element, $form_state);
}

function _instant_win_field_code_already_registered_validation($element, &$form_state, $form) {
  $email = $form_state['values']['email'];
  _instant_win_get_code_validation_with_transaction_scope($element, $form_state, $email);
}

function _instant_win_get_code_validation_with_transaction_scope($element, &$form_state, $email = NULL) {
  module_load_include('inc', 'instant_win', 'inc/instant_win.common');

  instant_win_create_transaction_on_form_state($form_state);
  module_load_include('inc', 'instant_win', 'inc/instant_win.validators');

  $is_valid_code = instant_win_validate_code($element['#value'], $email);

  if ($is_valid_code == INSTANT_WIN_INVALID_CODE) {
    form_error($element, variable_get('instant_win_register_form_code_error_message',
            'Register Code is not valid or has already been used by other user.'));
    $form_state['transaction']->rollback();
  }
  else if ($is_valid_code == INSTANT_WIN_USED_ON_SAME_DAY) {
    form_error($element, variable_get('instant_win_already_register_same_day_error_message',
            'The game code you have entered was previously used today. Please enter a different game code.'));
    $form_state['transaction']->rollback();
  }
}

function _instant_win_get_user_data_from_form_state(&$form_state) {
  $registered_at = time();
  $formatted_timestamp = date('Ymd', $registered_at);
  $forced_formatted_dob = preg_replace('/([0-9]{4}-[0-9]{2}-)[0-9]{2}/', '${1}01', $form_state['values']['submitted_tree']['field_dob']);

  return array(
    'first_name'                   => $form_state['values']['submitted_tree']['field_first_name'],
    'last_name'                    => $form_state['values']['submitted_tree']['field_last_name'],
    'address_line_1'               => $form_state['values']['submitted_tree']['field_address_line_1'],
    'address_line_2'               => $form_state['values']['submitted_tree']['field_address_line_2'],
    'city'                         => $form_state['values']['submitted_tree']['field_city'],
    'state'                        => $form_state['values']['submitted_tree']['field_state'],
    'zip'                          => $form_state['values']['submitted_tree']['field_zip'],
    'email'                        => drupal_strtolower($form_state['values']['submitted_tree']['field_email']),
    'telephone'                    => $form_state['values']['submitted_tree']['field_telephone'],
    'dob'                          => $forced_formatted_dob,
    'user_registered_at'           => $registered_at,
    'formatted_user_registered_at' => date('Ymd', $registered_at),
  );
}

function _instant_win_submit_handler($form, &$form_state) {
  $transaction = $form_state['transaction'];

  try {
    $entry = _instant_win_get_user_data_from_form_state($form_state);

    $id = db_insert('instant_win_users')
          ->fields($entry)
          ->execute();

    db_insert('instant_win_contest_entries')
      ->fields(array(
        'email' => $entry['email'],
        'contest_code' => $form_state['values']['submitted_tree']['field_registration_code'],
        'registered_at' => time(),
        'processed_at' => 0,
        'iwuid' => $id,
      ))
      ->execute();

    _instant_win_registration_form_handle_redirect($form_state);

    // transactions are automatically commited when the object dies
    unset($form_state['transaction']);
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('Instant Win', $e);
  }
}

/**
 * Handle wheter to success registration message will be displayed inside an overlay or redirected to a custom page.
 *
 * @param $form_state
 *  State of submitted form
 */
function _instant_win_registration_form_handle_redirect(&$form_state) {
  $display_success_as_modal = variable_get('instant_win_new_registration_form_display_success_as_overlay', FALSE);
  if ($display_success_as_modal) {
    $form_state['redirect'] = array(
      drupal_get_path_alias('node/' . variable_get('instant_win_webform_nid', '')),
      array(
        'query' => array(
          'success' => 1,
        ),
      )
    );
  }
  else {
    $form_state['redirect'] = 'register-form-success';
  }
}

function _instant_win_validate_register_limit_per_day($element, &$form_state) {
  $email = $element['#value'];
  module_load_include('inc', 'instant_win', 'inc/instant_win.validators');
  module_load_include('inc', 'instant_win', 'inc/instant_win.common');

  instant_win_create_transaction_on_form_state($form_state);
  if (!instant_win_validate_code_limit_by_user_per_day($email)) {
    form_error($element, variable_get('instant_win_register_form_exceed_limit_per_day_message', ''));
  }
}


function instant_win_delivery_raw_page($page_callback_result) {
  $page = array(
    '#theme_wrappers' => array('html'),
    'content' => $page_callback_result,
  );

  print drupal_render($page);
}