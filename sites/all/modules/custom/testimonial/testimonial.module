<?php

/**
 * @file
 * This module implements the Testimonials' admin tasks
 */
define('TESTIMONIAL_DEFAULT_PRELOADER_IMAGE_PATH', "img/preloader.gif");
define('TESTIMONIAL_USE_OVERLAY', variable_get('testimonial_form_overlay', ''));

function testimonial_init() {

  if (TESTIMONIAL_USE_OVERLAY) {
    drupal_add_js(array('testimonial_preloader_image_path' => _testimonial_get_path_preloader_image()), 'setting');
  }
  
  drupal_add_js(array('testimonial_body_limit_words' => variable_get('testimonial_body_limit_words', 0)), 'setting');
}

/**
 * Get the Path of Iframe Preloader Image
 *
 */
function _testimonial_get_path_preloader_image() {

  global $base_url;

  $preloader_image_path    = variable_get('testimonial_form_preloader_image');
  $file_public_path        = variable_get('file_public_path');
  $testimonial_module_path = drupal_get_path('module', 'testimonial');
  
  if (!empty($preloader_image_path)) {
    return $base_url .'/'. $file_public_path . '/' . $preloader_image_path; 
  }
  else {
    return $base_url .'/'. $testimonial_module_path . '/' . TESTIMONIAL_DEFAULT_PRELOADER_IMAGE_PATH;
  }
}

/**
 * Implements hook_help().
 */
function testimonial_help($path, $arg) {
  switch ($path) {
    case 'admin/help#testimonial':
      return t('Settings for Testimonial module');
  }
}

/**
 * Implements hook_permission().
 */
function testimonial_permission() {
  return array(
    'administer testimonial configuration' => array(
      'title' => t('Testimonial configuration'),
    ),
    'administer testimonial content' => array(
      'title' => t('Testimonial content management'),
    )
  );
}

/**
 * Implementation of hook_menu().
 */
function testimonial_menu() {
  $items = array();
  
  $items['admin/config/testimonial'] = array(
    'title' => 'Testimonial',
    'description' => 'Adjust Testimonial options.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('testimonial_admin_settings'),
    'access arguments' => array('administer testimonial configuration'),
    'file' => 'inc/testimonial.admin.settings.inc',
  );
  $items['admin/config/testimonial/url_settings'] = array(
    'title' => 'Adjust Testimonial options',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  $items['admin/config/testimonial/review'] = array(
    'title' => 'Unpublished Testimonials',
    'description' => 'List/Approve/Delete testimonials.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('testimonial_publish_form'),
    'access arguments' => array('administer testimonial content'),
    'file' => 'inc/testimonial.admin.content.inc',
    'type' => MENU_LOCAL_TASK,
  );
  
  $items['admin/config/testimonial/delete-confirm'] = array(
    'title' => 'Delete Testimonials',
    'description' => 'Calls the function that shows the Testionials do be deleted.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('testimonial_delete_confirmation_form'),
    'access arguments' => array('administer testimonial content'),
    'file' => 'inc/testimonial.admin.content.inc',
    'type' => MENU_CALLBACK,
  );
  
  $items['admin/config/testimonial/export/%'] = array(
    'title' => 'Export Testimonials',
    'description' => 'Calls the function that generates the PDF with Testionials.',
    'page callback' => 'testimonial_export_testimonials',
    'page arguments' => array(4),
    'access arguments' => array('administer testimonial content'),
    'file' => 'inc/testimonial.admin.content.inc',
  );
  
  $items['share-your-story'] = array(
    'title' => variable_get('testimonial_step1_title', 'Testimonials - Step 1'),
    'description' => 'Testimonial submission form.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('testimonial_submission_gateway'),
    'access arguments' => array('access content'),
    'file' => 'inc/testimonial.submission.inc',
    'delivery callback' => 'testimonial_delivery_page',
  );
  
  $items['share-your-story/thank-you'] = array(
    'title' => 'Thank You',
    'title callback' => '_testimonial_thank_you_page_title',
    'description' => 'Thank You page for Testimonial submissions',
    'page callback' => 'testimonial_thank_you_page',
    'access arguments' => array('access content'),
    'file' => 'inc/testimonial.submission.inc', 
    'delivery callback' => 'testimonial_delivery_success_page',
  );
  
  return $items;
}

/**
 * Testimonial thank you page title callback.
 */
function _testimonial_thank_you_page_title() {
  return variable_get('testimonial_thankyou_page_title', 'Thank You');
}

/**
 * Implementation of hook_theme().
 */
function testimonial_theme() {
  return array(
    'testimonial_submission_form'  => array(
      'render element' => 'form',
      'path'  => drupal_get_path('module', 'testimonial') . '/theme/',
      'template' => 'testimonial_submission_form',
    ),
    'testimonial_confirmation_form'  => array(
      'render element' => 'form',
      'template' => 'testimonial_confirmation_form',
    ),
  );
}

/**
 * Implementation of hook_cron().
 */
function testimonial_cron() {
  
  $last_cron_run_day = variable_get('testimonial_last_cron_run', 
          date('Ymd', mktime(0, 0, 0, date('m'), date('d') - 1, date('Y'))));
  $current_day = date('Ymd');
  
  if ($last_cron_run_day < $current_day) {
    testimonial_send_email_with_attachment();
    variable_set('testimonial_last_cron_run', $current_day);
  }
}

/**
 * Export the unpublished testimonials from yesterday to PDF and send it by e-mail
 */
function testimonial_send_email_with_attachment() {
  module_load_include('inc', 'testimonial', 'inc/testimonial.admin.content');
  
    $one_day_timestamp = 86400; // representing one day in timestamp (total seconds on one day = 86400)
  
  $yesterday_ini = REQUEST_TIME - $one_day_timestamp; // get the timestamp of previous day (actual - 1 day)
  $today_ini = REQUEST_TIME; // gat actual timestamp
  
  $pdf = testimonial_export_testimonials('all', TRUE, TRUE, $yesterday_ini, $today_ini);
  
  $file_name = 'testimonials.pdf';
  $file_path = getcwd() . '/' . variable_get('file_private_path', 'sites/default/files/private') . '/' . $file_name;
  
  $to         = variable_get('testimonial_GSSE_email', '');
  $from       = variable_get('testimonial_sender_email', '');
  
  if (empty($to) || empty($from)) {
    watchdog('testimonial', 'No email sent. Please make sure sender and receiver e-mails are set in the :admin_form.',
            array(':admin_form' => l('admin form', 'admin/config/testimonial')));
    return;
  }
  
  $subject    = testimonial_filter(variable_get('testimonial_email_subject', ''));
  $message    = strip_tags(variable_get('testimonial_email_content', ''));

  $attachment = array(
    'uri' => "$file_path",
    'filename' => "$file_name",
  );
  
  $header = "From: " . $from . " <" . $from . ">\r\n";
  
  if (!empty($attachment['uri'])) {
    $filename = empty($attachment['filename']) ? basename($attachment['uri']) : $attachment['filename'] ;
    
    $content = file_get_contents($attachment['uri']);   
    $content = chunk_split(base64_encode($content));
    $uid = md5(uniqid(time()));
    $header .= "MIME-Version: 1.0\r\n";
    $header .= "Content-Type: multipart/mixed; boundary=\"" . $uid . "\"\r\n\r\n";
    $header .= "This is a multi-part message in MIME format.\r\n";
    $header .= "--" . $uid . "\r\n";
    $header .= "Content-type:text/html; charset=iso-8859-1\r\n";
    $header .= "Content-Transfer-Encoding: 7bit\r\n\r\n";
    $header .= $message . "\r\n\r\n";
    $header .= "--" . $uid . "\r\n";
    $header .= "Content-Type: application/octet-stream; name=\"" . $filename . "\"\r\n"; // use diff. tyoes here
    $header .= "Content-Transfer-Encoding: base64\r\n";
    $header .= "Content-Disposition: attachment; filename=\"" . $filename . "\"\r\n\r\n";
    $header .= $content . "\r\n\r\n";
    $header .= "--" . $uid . "--";
  }

  $site_email = variable_get('site_mail', '');

  if (mail($to, $subject, $message, $header, '-r '.$site_email)) {
    if (isset($file_path) && file_exists($file_path)) {
      watchdog('testimonial', 'Testimonials have been successfully sent to :to.', array(':to' => $to));
      unlink($file_path);
    }
  }
  else {
    watchdog('testimonial', 'Failed to send email with testimonials.');
  }
  
}

/**
 * Apply filters to $string and return the result.
 */
function testimonial_filter($string) {
  return str_replace('[current-time]', date('m/d/Y h:i:s A', time()), $string);
}

/**
 * Implements hook_node_info()
 */
function testimonial_node_info() {
  return array(
    'testimonial' => array(
      'name' => t('Testimonial'),
      'base' => 'node_content',
      'has_title' => TRUE,  
      'title_label' => t('Story title'),
      'description' => t('Testimonial information.'),
    )
  );
}

